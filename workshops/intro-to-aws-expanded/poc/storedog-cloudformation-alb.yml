AWSTemplateFormatVersion: 2010-09-09
Resources:
  LabInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: app
          Value: AWSLab
  LabVPC:
    Type: "AWS::EC2::VPC"
    DependsOn: LabInternetGateway
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: app
          Value: AWSLab
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: LabVPC
      InternetGatewayId:
        Ref: LabInternetGateway
  LabRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: LabVPC
      Tags:
        - Key: app
          Value: AWSLab
  LabDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: LabRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: LabInternetGateway
  LabSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-west-2a"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: LabVPC
      Tags:
        - Key: app
          Value: AWSLab
  LabSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-west-2b"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: LabVPC
      Tags:
        - Key: app
          Value: AWSLab
  LabSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-west-2c"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: LabVPC
      Tags:
        - Key: app
          Value: AWSLab
  LabRouteAc1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: LabRouteTable
      SubnetId:
        Ref: LabSubnet1
  LabRouteAc2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: LabRouteTable
      SubnetId:
        Ref: LabSubnet2
  LabRouteAc3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: LabRouteTable
      SubnetId:
        Ref: LabSubnet3
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup for the lab RDS instance
      DBSubnetGroupName: LabDBSubnetGroup
      SubnetIds:
        - Ref: LabSubnet1
        - Ref: LabSubnet2
        - Ref: LabSubnet3
      Tags:
        - Key: project
          Value: "Intro to AWS"
  DBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBName: AdsDiscountsDB
      Engine: postgres
      MasterUsername: postgres
      MasterUserPassword: postgres
      DBInstanceClass: db.t3.micro
      VPCSecurityGroups:
        - Ref: DefaultNetwork
      DBSubnetGroupName: 
        Ref: DBSubnetGroup
      AllocatedStorage: 20
      Tags:
        - Key: project
          Value: "Intro to AWS"
        - Key: env
          Value: intro-aws-1
        - Key: service
          Value: database
  AdvertisementsService:
    DependsOn:
      - AdvertisementsTCP5002Listener
      - DBInstance
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: advertisements
          ContainerPort: 5002
          TargetGroupArn:
            Ref: AdvertisementsTCP5002TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - Ref: LabSubnet1
            - Ref: LabSubnet2
            - Ref: LabSubnet3
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - AdvertisementsServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: project
          Value: "Intro to AWS"
        - Key: service
          Value: advertisements
        - Key: env
          Value: intro-aws-1
      TaskDefinition:
        Ref: AdvertisementsTaskDefinition
    Type: AWS::ECS::Service
  AdvertisementsServiceDiscoveryEntry:
    Properties:
      Description: '"advertisements" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      Name: advertisements
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  AdvertisementsTCP5002Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: AdvertisementsTCP5002TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 5002
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  AdvertisementsTCP5002TargetGroup:
    Properties:
      Port: 5002
      Protocol: HTTP
      Tags:
        - Key: project
          Value: "Intro to AWS"
      TargetType: ip
      VpcId:
        Ref: LabVPC
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  AdvertisementsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: advertisements
          Environment:
            - Name: FLASK_APP
              Value: ads.py
            - Name: FLASK_DEBUG
              Value: "1"
            - Name: POSTGRES_HOST
              Value:
                Fn::GetAtt:
                  - DBInstance
                  - Endpoint.Address
            - Name: POSTGRES_PASSWORD
              Value: postgres
            - Name: POSTGRES_USER
              Value: postgres
          Essential: True
          Image: public.ecr.aws/x2b9z2t7/ddtraining/advertisements-fixed:2.2.0
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: lab
          PortMappings:
            - ContainerPort: 5002
              HostPort: 5002
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - AdvertisementsTaskExecutionRole
          - Arn
      Family: lab-advertisements
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: project
          Value: "Intro to AWS"
        - Key: env
          Value: intro-aws-1
        - Key: service
          Value: advertisements
  AdvertisementsTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: project
          Value: "Intro to AWS"
        - Key: service
          Value: advertisements
    Type: AWS::IAM::Role
  CloudMap:
    Properties:
      Description: Service Map for Intro to AWS Lab
      Name: lab.local
      Vpc:
        Ref: LabVPC
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: lab
      Tags:
        - Key: project
          Value: "Intro to AWS"
    Type: AWS::ECS::Cluster
  DefaultNetwork:
    Properties:
      GroupDescription: lab Security Group for default network
      Tags:
        - Key: project
          Value: "Intro to AWS"
        - Key: network
          Value: lab_default
      VpcId:
        Ref: LabVPC
    Type: AWS::EC2::SecurityGroup
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Path: /
  DiscountsService:
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Code:
        S3Bucket: dd-training-team
        S3Key: discounts-lambda-package.zip
      Environment:
        Variables:
          POSTGRES_HOST:
            Fn::GetAtt:
              - DBInstance
              - Endpoint.Address
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      VpcConfig:
        SecurityGroupIds:
          - Ref: DefaultNetwork
        SubnetIds:
          - Ref: LabSubnet1
          - Ref: LabSubnet2
          - Ref: LabSubnet3
      Tags:
        - Key: project
          Value: "Intro to AWS"
        - Key: env
          Value: aws-intro-1 
        - Key: service
          Value: discounts
        - Key: version
          Value: 1.0.0
    Type: AWS::Lambda::Function
  DiscountsServiceURLInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: DiscountsService
      FunctionUrlAuthType: "NONE"
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
  DiscountsServiceURL:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: "NONE"
      Cors:
        AllowMethods:
          - GET
        AllowOrigins:
          - "*"
      TargetFunctionArn:
        Ref: DiscountsService
  FrontendService:
    DependsOn: FrontendTCP3000Listener
    Properties:
      Cluster:
        Fn::GetAtt:
          - Cluster
          - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 3000
          TargetGroupArn:
            Ref: FrontendTCP3000TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DefaultNetwork
          Subnets:
            - Ref: LabSubnet1
            - Ref: LabSubnet2
            - Ref: LabSubnet3
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - FrontendServiceDiscoveryEntry
              - Arn
      Tags:
        - Key: project
          Value: "Intro to AWS"
        - Key: service
          Value: frontend
      TaskDefinition:
        Ref: FrontendTaskDefinition
    Type: AWS::ECS::Service
  FrontendServiceDiscoveryEntry:
    Properties:
      Description: '"frontend" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      Name: frontend
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  FrontendTCP3000Listener:
    Properties:
      DefaultActions:
        - ForwardConfig:
            TargetGroups:
              - TargetGroupArn:
                  Ref: FrontendTCP3000TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 3000
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  FrontendTCP3000TargetGroup:
    Properties:
      Port: 3000
      Protocol: HTTP
      Tags:
        - Key: project
          Value: "Intro to AWS"
      TargetType: ip
      VpcId:
        Ref: LabVPC
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: frontend
          Environment:
            - Name: ADS_ROUTE
              Value: http://advertisements.lab.local
            - Name: ADS_PORT
              Value: 5002
            - Name: DISCOUNTS_ROUTE
              Value:
                Fn::GetAtt:
                  - DiscountsServiceURL
                  - FunctionUrl
            - Name: DISCOUNTS_PORT
              Value: 443
            - Name: POSTGRES_USER
              Value: postgres
          Essential: True
          Image: public.ecr.aws/x2b9z2t7/ddtraining/storefront-fixed:2.2.1
          LinuxParameters: {}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: LogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: lab
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - FrontendTaskExecutionRole
          - Arn
      Family: lab-frontend
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: project
          Value: "Intro to AWS"
        - Key: env
          Value: intro-aws-1
        - Key: service
          Value: frontend
  FrontendTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition: {}
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: project
          Value: "Intro to AWS"
    Type: AWS::IAM::Role
  LoadBalancerSG:
   Type: AWS::EC2::SecurityGroup
   Properties:
     GroupDescription: 'Enable HTTP access via ports 3000 and 5002'
     SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 3000
         ToPort: 3000
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 5002
         ToPort: 5002
         CidrIp: 0.0.0.0/0  
     VpcId: !Ref LabVPC
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref ALBLogsBucket
        - Key: access_logs.s3.prefix
          Value: alb-logs
      Subnets:
        - Ref: LabSubnet1
        - Ref: LabSubnet2
        - Ref: LabSubnet3
      Tags:
        - Key: project
          Value: "Intro to AWS"
      SecurityGroups: 
        - !GetAtt LoadBalancerSG.GroupId
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: awslab
    Type: AWS::Logs::LogGroup
  WebServerInstanceProfileRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 'dynamodb:*'
                  Resource: 
                    Fn::GetAtt:
                      - SaApiTable
                      - Arn
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebServerInstanceProfileRole
  WebServerSecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
     GroupDescription: 'Enable HTTP access via port 80'
     SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         CidrIp: 0.0.0.0/0
     VpcId: !Ref LabVPC
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            /etc/cfn/hooks.d/cfn-auto-reloader.conf: 
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AvailabilityZone: us-west-2a
      SubnetId: !Ref LabSubnet1
      ImageId: ami-08e2d37b6a0129927
      InstanceType: t2.small
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref WebServerInstanceProfile  
      Tags:
        - Key: Name
          Value: 'sa-api'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Update aws-cfn-bootstrap to the latest
            yum install -y aws-cfn-bootstrap
            # Call cfn-init script to install files and packages
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
            # Install node LTS
            curl -sL https://rpm.nodesource.com/setup_16.x | bash -
            yum install -y nodejs
            curl -L -o /tmp/saa.tgz https://github.com/stevedatadog/sentiment-analysis-api/tarball/v1.0.0-no-creds
            mkdir -p /opt/saa && cd $_
            tar --strip-components=1 -xzvf /tmp/saa.tgz
            npm install
            npm install -g pm2
            export SAA_LISTEN_PORT=80
            pm2 start npm --name "ssa-server" -- start
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
  
  WebServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebServerInstance
  
  SaApiTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: storedog-sentiment-v2
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5 

  ALBLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - '-'
        - - 'alb-logs'
          - !Ref AWS::AccountId
      AccessControl: LogDeliveryWrite
  ECSLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ALBLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ALBLogsBucket
                - /*
            Principal: '*'
            
Outputs:
   WebsiteURL:
     Value: !Sub http://${WebServerEIP}
     Description: Application URL