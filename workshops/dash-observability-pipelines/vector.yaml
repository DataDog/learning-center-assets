## See Vector helm documentation to learn more:
## https://vector.dev/docs/setup/installation/package-managers/helm/

# nameOverride -- Override name of app
fullnameOverride: vector

## Create a Secret resource for Vector to use
secrets:
  # secrets.generic -- Each Key/Value will be added to the Secret's data key, each value should be raw and NOT base64 encoded
  ## Any secrets can be provided here, it's commonly used for credentials and other access related values.
  ## NOTE: Don't commit unencrypted secrets to git!
  generic:
    datadog_api_key: ""
    #datadog_configuration_key: ""

# env -- Set environment variables in Vector containers
## The examples below leverage examples from secrets.generic and assume no name overrides with a Release name of "vector"
env:
  - name: DATADOG_API_KEY
    valueFrom:
      secretKeyRef:
        name: vector
        key: datadog_api_key
  # - name: DATADOG_OP_CONFIG_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: vector
  #       key: datadog_configuration_key
  - name: VECTOR_LOG_FORMAT
    value: json

# customConfig -- Override Vector's default configs, if used **all** options need to be specified
## This section supports using helm templates to populate dynamic values
## Ref: https://vector.dev/docs/reference/configuration/
customConfig:
  data_dir: /vector-data-dir
  # TODO: enterprise config block
#   enterprise:
#     api_key: "${DATADOG_API_KEY}"
#     configuration_key: "${DATADOG_OP_CONFIG_KEY}"
#     site: "datadoghq.com"
  api:
    enabled: true
    address: 0.0.0.0:8686
    playground: false
  sources:
    datadog_agent:
      address: 0.0.0.0:8282
      type: datadog_agent
      multiple_outputs: true
  transforms:
    remap_logs:
      type: remap
      inputs:
        - datadog_agent.logs
      source: |
        # Parse the received .ddtags field so we can more easily access the contained tags
        .ddtags = parse_key_value!(.ddtags, key_value_delimiter: ":", field_delimiter: ",")
        .ddtags.sender = "vector"
        .ddtags.vector_aggregator = get_hostname!()
        # Re-encode Datadog tags as a string for the `datadog_logs` sink
        .ddtags = encode_key_value(.ddtags, key_value_delimiter: ":", field_delimiter: ",")
        # Datadog Agents pass a "status" field that is stripped when ingested
        del(.status)
  sinks:
    datadog_logs:
      type: datadog_logs
      inputs:
        - remap_logs
      default_api_key: ${DATADOG_API_KEY}
      compression: gzip
    datadog_metrics:
      type: datadog_metrics
      inputs:
        - datadog_agent.metrics
      default_api_key: ${DATADOG_API_KEY}

# livenessProbe -- Override default liveness probe settings, if customConfig is used requires customConfig.api.enabled true
## Requires Vector's API to be enabled
livenessProbe:
  httpGet:
    path: /health
    port: api

# readinessProbe -- Override default readiness probe settings, if customConfig is used requires customConfig.api.enabled true
## Requires Vector's API to be enabled
readinessProbe:
  httpGet:
    path: /health
    port: api