AWSTemplateFormatVersion: 2010-09-09
Resources:
  LabInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: app
          Value: AWSLab
  LabVPC:
    Type: "AWS::EC2::VPC"
    DependsOn: LabInternetGateway
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: app
          Value: AWSLab
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: LabVPC
    Properties:
      VpcId:
        Ref: LabVPC
      InternetGatewayId:
        Ref: LabInternetGateway
  LabRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: [ LabVPC, LabInternetGateway, AttachGateway ]
    Properties:
      VpcId:
        Ref: LabVPC
      Tags:
        - Key: app
          Value: AWSLab
  LabDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: LabInternetGateway
    Properties:
      RouteTableId:
        Ref: LabRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: LabInternetGateway
  LabSubnet1:
    Type: "AWS::EC2::Subnet"
    DependsOn: LabRouteTable
    Properties:
      AvailabilityZone: "us-west-2a"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: LabVPC
      Tags:
        - Key: app
          Value: AWSLab
  LabSubnet2:
    Type: "AWS::EC2::Subnet"
    DependsOn: LabRouteTable
    Properties:
      AvailabilityZone: "us-west-2b"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: LabVPC
      Tags:
        - Key: app
          Value: AWSLab
  LabSubnet3:
    Type: "AWS::EC2::Subnet"
    DependsOn: LabRouteTable
    Properties:
      AvailabilityZone: "us-west-2c"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: True
      VpcId:
        Ref: LabVPC
      Tags:
        - Key: app
          Value: AWSLab
  LabRouteAc1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: LabDefaultRoute
    Properties:
      RouteTableId:
        Ref: LabRouteTable
      SubnetId:
        Ref: LabSubnet1
  LabRouteAc2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: LabDefaultRoute
    Properties:
      RouteTableId:
        Ref: LabRouteTable
      SubnetId:
        Ref: LabSubnet2
  LabRouteAc3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn: LabDefaultRoute
    Properties:
      RouteTableId:
        Ref: LabRouteTable
      SubnetId:
        Ref: LabSubnet3
  DBSubnetGroup:
    DependsOn: 
      - LabSubnet1
      - LabSubnet2
      - LabSubnet3
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: DBSubnetGroup for the lab RDS instance
      DBSubnetGroupName: LabDBSubnetGroup
      SubnetIds: 
        - Ref: LabSubnet1
        - Ref: LabSubnet2
        - Ref: LabSubnet3
      Tags: 
        - Key: project
          Value: "Intro to AWS"
  DBInstance: 
    Type: "AWS::RDS::DBInstance"
    DependsOn:
      - DBSubnetGroup
    Properties:
      DBName: AdsDiscountsDB
      Engine: postgres
      MasterUsername: postgres
      MasterUserPassword: postgres
      DBInstanceClass: db.t3.micro
      VPCSecurityGroups: 
        - Ref: DefaultNetwork
      DBSubnetGroupName: LabDBSubnetGroup
      AllocatedStorage: 20 
  DefaultNetwork:
    Properties:
      GroupDescription: lab Security Group for default network
      Tags:
      - Key: project
        Value: "Intro to AWS"
      - Key: network
        Value: lab_default
      VpcId:
        Ref: LabVPC
    Type: AWS::EC2::SecurityGroup
  DefaultNetworkIngress:
    Properties:
      Description: Allow communication within network default
      GroupId:
        Ref: DefaultNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: DefaultNetwork
    Type: AWS::EC2::SecurityGroupIngress
  LambdaRole:
     Type: AWS::IAM::Role
     Properties:
       RoleName:
         Fn::Sub: lambda-role
       AssumeRolePolicyDocument:
         Statement:
           - Action:
             - sts:AssumeRole
             Effect: Allow
             Principal:
               Service:
               - lambda.amazonaws.com
         Version: 2012-10-17
       ManagedPolicyArns:
         - arn:aws:iam::aws:policy/AWSLambdaExecute
         - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole 
         - arn:aws:iam::aws:policy/AmazonS3FullAccess
       Path: /
  DiscountsService:
    DependsOn:
    - LambdaRole
    - DBInstance
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Code: 
        S3Bucket: dd-training-team
        S3Key: discounts-lambda-package.zip
      Environment:
        Variables:
          POSTGRES_HOST: 
            Fn::GetAtt:
            - DBInstance
            - Endpoint.Address
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      VpcConfig:
        SecurityGroupIds:
          - Ref: DefaultNetwork
        SubnetIds:
          - Ref: LabSubnet1
          - Ref: LabSubnet2
          - Ref: LabSubnet3
      Tags:
      - Key: project
        Value: "Intro to AWS"
      - Key: service
        Value: discounts
    Type: AWS::Lambda::Function
  DiscountsServiceUrlInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
       FunctionName: 
         Ref: DiscountsService
       FunctionUrlAuthType: 'NONE'
       Action: lambda:InvokeFunctionUrl
       Principal: '*'
  DiscountsServiceURL:
    Type: AWS::Lambda::Url
    Properties: 
      AuthType: 'NONE'
      Cors: 
        AllowMethods: 
          - GET
        AllowOrigins: 
          - "*"
      TargetFunctionArn:
        Ref: DiscountsService
  LoadBalancer:
    Properties:
      LoadBalancerAttributes:
      - Key: load_balancing.cross_zone.enabled
        Value: "true"
      Scheme: internet-facing
      Subnets:
      - Ref: LabSubnet1
      - Ref: LabSubnet2
      - Ref: LabSubnet3
      Tags:
      - Key: project
        Value: "Intro to AWS"
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  LogGroup:
    Properties:
      LogGroupName: awslab
    Type: AWS::Logs::LogGroup
