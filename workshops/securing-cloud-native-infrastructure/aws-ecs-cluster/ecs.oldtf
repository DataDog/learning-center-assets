variable "ddApiKey" {}

data "aws_ami" "amazon-linux-2" {
  most_recent = true

  filter {
    name   = "owner-alias"
    values = ["amazon"]
  }

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-ebs"]
  }
}

resource "aws_launch_template" "fargate-worker" {
  name_prefix   = "fargate-worker"
  image_id      = aws_ami.amazon-linux-2.image_id
  instance_type = "t2.medium"
}

resource "aws_autoscaling_group" "fargate-cluster" {
  name             = "fargate-asg"
  min_size         = 1
  max_size         = 5
  desired_capacity = 1
  force_delete     = true

  launch_template {
    id      = aws_launch_template.fargate-worker.id
    version = "$Latest"
  }

  tag {
    key                 = "AmazonECSManaged"
    value               = true
    propagate_at_launch = true
  }
}

module "ecs" {
  source = "terraform-aws-modules/ecs/aws"

  cluster_name                          = "ecommerce-ecs-cluster"
  default_capacity_provider_use_fargate = false

  cluster_configuration = {
    execute_command_configuration = {
      logging = "OVERRIDE"
      log_configuration = {
        cloud_watch_log_group_name = "/aws/ecs/ecommerce-ecs-cluster"
      }
    }
  }

  autoscaling_capacity_providers {
    autoscaling = {
      auto_scaling_group_arn         = aws_autoscaling_group.fargate-cluster.arn
      managed_termination_protection = "DISABLED"

      managed_scaling = {
        maximum_scaling_step_size = 1
        minimum_scaling_step_size = 1
        status                    = "ENABLED"
        target_capacity           = 90

        default_capacity_provider_strategy = {
          base   = 1
          weight = 100
        }
      }
    }
  }
}

resource "aws_ecs_task_definition" "datadog-agent" {
  family                   = "datadog-agent-task"
  execution_role_arn       = "TODO"
  task_role_arn            = "TODO"
  requires_compatibilities = ["EC2"]
  network_mode             = "bridge"
  container_definitions = templatefile("./agent-task-containers.tftpl", {
    ddApiKey = var.ddApiKey
  })

  volume {
    name      = "docker_sock"
    host_path = "/var/run/docker.sock"
  }

  volume {
    name      = "proc"
    host_path = "/proc/"
  }

  volume {
    name      = "cgroup"
    host_path = "/cgroup/"
  }

  volume {
    name      = "passwd"
    host_path = "/etc/passwd"
  }

  volume {
    name      = "pointdir"
    host_path = "/opt/datadog-agent/run"
  }
}
