version: '3'
services:
  datadog:
    image: 'datadog/agent:7.31.1'
    environment:
      - DD_API_KEY
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_DOCKER_LABELS_AS_TAGS={"my.custom.label.team":"team"}
      - DD_TAGS='env:intro-to-logs'
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_HOSTNAME=intro-logs-host
    ports:
      - 127.0.0.1:8126:8126/tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
  discounts:
    environment:
      - FLASK_APP=discounts.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_HOST=db
      - DD_SERVICE=discounts-service
      - DD_ENV=intro-to-logs
      - DD_LOGS_INJECTION=true
      - DD_TRACE_SAMPLE_RATE=1.0
      - DD_PROFILING_ENABLED=true
      - DD_AGENT_HOST=datadog
    image: 'ddtraining/discounts:2.1.2'
    command:
      [
        sh,
        -c,
        'ddtrace-run flask run --port=5001 --host=0.0.0.0'
      ]
    ports:
      - '5001:5001'
    volumes:
      - /root/discounts.py:/app/discounts.py
    depends_on:
      - datadog
      - db
    labels:
      com.datadoghq.tags.env: 'intro-to-logs'
      com.datadoghq.tags.service: 'discounts-service'
      com.datadoghq.tags.version: '2.1.2'
      my.custom.label.team: 'discounts'
      com.datadoghq.ad.logs: '[{"source": "python", "service": "discounts-service"}]'
  frontend:
    environment:
      - DD_SERVICE=store-frontend
      - DD_ENV=intro-to-logs
      - DD_LOGS_INJECTION=true
      - DD_TRACE_SAMPLE_RATE=1.0
      - DD_PROFILING_ENABLED=true
      - DD_AGENT_HOST=datadog
    image: 'ddtraining/storefront-fixed:2.1.2'
    command: sh docker-entrypoint.sh
    ports:
      - '3000:3000'
    depends_on:
      - datadog
      - discounts
      - advertisements
    labels:
      com.datadoghq.tags.env: 'intro-to-logs'
      com.datadoghq.tags.service: 'store-frontend'
      com.datadoghq.tags.version: '2.1.2'
      my.custom.label.team: 'frontend'
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "store-frontend"}]'
  advertisements:
    environment:
      - FLASK_APP=ads.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_HOST=db
      - DD_SERVICE=advertisements-service
      - DD_ENV=intro-to-logs
      - DD_LOGS_INJECTION=true
      - DD_TRACE_SAMPLE_RATE=1.0
      - DD_PROFILING_ENABLED=true
      - DD_AGENT_HOST=datadog
    image: 'ddtraining/advertisements:2.1.2'
    command:
      [
        sh,
        -c,
        'ddtrace-run flask run --port=5002 --host=0.0.0.0'
      ]
    ports:
      - '5002:5002'
    volumes:
      - /root/ads.py:/app/ads.py
    depends_on:
      - datadog
      - db
    labels:
      com.datadoghq.tags.env: 'intro-to-logs'
      com.datadoghq.tags.service: 'advertisements-service'
      com.datadoghq.tags.version: '2.1.2'
      my.custom.label.team: 'advertisements'
      com.datadoghq.ad.logs: '[{"source": "python", "service": "advertisements-service"}]'
  db:
    image: postgres:11-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
    ports:
      - '5432:5432'
    labels:
      com.datadoghq.tags.env: 'intro-to-logs'
      com.datadoghq.tags.service: 'database'
      com.datadoghq.tags.version: '11.12'
      my.custom.label.team: 'database'
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":5432,"username":"datadog","password":"datadog"}]'
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "database"}]'
    volumes:
      - /root/postgres:/var/lib/postgresql/data
      - /root/dd_agent.sql:/docker-entrypoint-initdb.d/dd_agent.sql
  puppeteer:
    image: buildkite/puppeteer:10.0.0
    volumes:
      - /root/puppeteer-mobile.js:/puppeteer.js
      - /root/puppeteer.sh:/puppeteer.sh
    environment:
      - STOREDOG_URL
      - PUPPETEER_TIMEOUT
    depends_on:
      - frontend
    command: bash puppeteer.sh
