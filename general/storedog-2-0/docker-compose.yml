version: '3.7'
services:
  datadog:
    image: 'datadog/agent:7'
    environment:
      - DD_API_KEY
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_DOCKER_LABELS_AS_TAGS='{"my.custom.label.team":"team"}'
      - DD_TAGS='${DD_TAGS-env:storedog-2-0-demo}'
      - DD_HOSTNAME=${DD_HOSTNAME-lab-host}
      - DD_HOSTNAME
      - DD_APM_NON_LOCAL_TRAFFIC=true
    ports:
      - 127.0.0.1:8126:8126/tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
  discounts:
    image: public.ecr.aws/x2b9z2t7/storedog/discounts:1.0.1
    environment:
      - FLASK_APP=discounts.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_HOST=db
      - DD_ENV=storedog-2-0-demo
      - DD_SERVICE=store-discounts
      - DD_AGENT_HOST=datadog
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
    ports:
      - '${DISCOUNTS_PORT}:${DISCOUNTS_PORT}'
    depends_on:
      - datadog
      - db
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "store-discounts"}]'
      com.datadoghq.tags.env: 'storedog-2-0-demo'
      com.datadoghq.tags.service: 'store-discounts'
      com.datadoghq.tags.version: '2.2.0'
      my.custom.label.team: 'discounts'
  frontend:
    image: public.ecr.aws/x2b9z2t7/storedog/frontend:1.0.1
    command: yarn dev
    volumes:
      - /root/lab/storedog-frontend/services/frontend/site:/storedog-app/site
      - /root/lab/.env:/storedog-app/site/.env.local
    ports:
      - '${FRONTEND_PORT-3000}:${FRONTEND_PORT-3000}'
    environment:
      - DD_AGENT_HOST=datadog
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_ENV=storedog-2-0-demo
      - DD_SERVICE=store-frontend
      - DD_SITE=datadoghq.com
      - DD_VERSION
      - POSTGRES_USERNAME
      - POSTGRES_PASSWORD
      - DD_CLIENT_TOKEN
      - DD_APPLICATION_ID
    depends_on:
      - datadog
      - db
      - discounts
      - advertisements
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "store-frontend"}]'
      com.datadoghq.tags.env: 'dd101-dev'
      com.datadoghq.tags.service: 'store-frontend'
      com.datadoghq.tags.version: '2.2.0'
      my.custom.label.team: 'frontend'
  backend:
    image: public.ecr.aws/x2b9z2t7/storedog/backend:1.0.5
    command: wait-for-it db:5432 -- bundle exec rails s -b 0.0.0.0 -p 4000
    depends_on:
      - 'db'
      - 'redis'
    ports:
      - '${ADMIN_PORT:-4000}:${ADMIN_PORT:-4000}'
    volumes:
      - '/root/database.yml:/app/config/database.yml'
    environment:
      - REDIS_URL
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DISABLE_SPRING=1
      - NEXT_PUBLIC_SPREE_API_HOST
      - NEXT_PUBLIC_SPREE_CLIENT_HOST
  worker:
    image: public.ecr.aws/x2b9z2t7/storedog/backend:1.0.5
    command: wait-for-it db:5432 -- bundle exec sidekiq -C config/sidekiq.yml
    depends_on:
      - db
      - redis
      - backend
    volumes:
      - '/root/database.yml:/app/config/database.yml'
    environment:
      - REDIS_URL
      - DB_HOST=db
      - DB_PORT=5432
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - DISABLE_SPRING=1
      - NEXT_PUBLIC_SPREE_API_HOST
      - NEXT_PUBLIC_SPREE_CLIENT_HOST
  advertisements:
    image: 'public.ecr.aws/x2b9z2t7/storedog/ads:1.0.1'
    environment:
      - FLASK_APP=ads.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_HOST=db
      - DD_ENV=storedog-2-0-demo
      - DD_SERVICE=store-ads
      - DD_AGENT_HOST=datadog
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
    ports:
      - '${ADS_PORT}:${ADS_PORT}'
    depends_on:
      - datadog
      - db
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "store-ads"}]'
      com.datadoghq.tags.env: 'storedog-2-0-demo'
      com.datadoghq.tags.service: 'store-ads'
      com.datadoghq.tags.version: '2.2.0'
      my.custom.label.team: 'advertisements'
  nginx:
    image: nginx:1.21.4
    restart: always
    ports:
      - "80:80"
    depends_on:
      - frontend
    volumes:
      - /root/nginx-default.conf:/etc/nginx/conf.d/default.conf
      - /root/nginx-status.conf:/etc/nginx/conf.d/status.conf
    labels:
      com.datadoghq.ad.logs: '[{"source": "nginx", "service": "webserver"}]'
      com.datadoghq.ad.check_names: '["nginx"]'
      com.datadoghq.ad.init_configs': '[{}]'
      com.datadoghq.ad.instances: '[{"nginx_status_url": "http://%%host%%:81/nginx_status/"}]'
  db:
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
    ports:
      - '5432:5432'
    labels:
      com.datadoghq.tags.env: 'storedog-2-0-demo'
      com.datadoghq.tags.service: 'database'
      com.datadoghq.tags.version: '13'
      my.custom.label.team: 'database'
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":5432,"username":"datadog","password":"datadog"}]'
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "database"}]'
    volumes:
      - /root/restore.sql:/docker-entrypoint-initdb.d/restore.sql
  redis:
    image: redis:6.2-alpine
    volumes:
      - '/root/redis:/data'
  puppeteer:
    image: buildkite/puppeteer:10.0.0
    volumes:
      - /root/puppeteer-checkout-funnel.js:/puppeteer.js
      - /root/puppeteer.sh:/puppeteer.sh
    environment:
      - STOREDOG_URL
      - PUPPETEER_TIMEOUT
      - SKIP_SESSION_CLOSE
    depends_on:
      - frontend
    command: bash puppeteer.sh
